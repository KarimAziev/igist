#+AUTHOR: Karim Aziiev
#+EMAIL: karim.aziiev@gmail.com
#+OPTIONS: ^:nil tags:nil num:nil

[[https://melpa.org/#/igist][file:https://melpa.org/packages/igist-badge.svg]]

* About
The Emacs everywhere goal continues. These are the main features of
~igist~ to help you never leave Emacs to manage your gists.

[[./igist-demo.gif]]

** Features
*** Gists
- [X] create
- [X] edit
- [X] delete
- [X] star
- [X] unstar
- [X] fork
- [X] list
- [X] explore public gists
*** Comments
- [X] add
- [X] list
- [X] delete
- [X] edit



* igist                                                            :TOC_3_gh:QUOTE:
#+BEGIN_QUOTE
- [[#about][About]]
  - [[#features][Features]]
    - [[#gists][Gists]]
    - [[#comments][Comments]]
  - [[#requirements][Requirements]]
  - [[#installation][Installation]]
    - [[#melpa][MELPA]]
    - [[#manually][Manually]]
    - [[#with-use-package][With ~use-package~]]
  - [[#auth][Auth]]
    - [[#secure][Secure]]
    - [[#insecure][Insecure]]
  - [[#usage][Usage]]
    - [[#general][General]]
    - [[#list-gists][List gists]]
    - [[#table][Table]]
    - [[#minibuffer-completions][Minibuffer Completions]]
    - [[#edit-gist][Edit gist]]
    - [[#list-comments][List comments]]
    - [[#editing-comment][Editing comment]]
#+END_QUOTE

** Requirements

+ Emacs >= 27.1
+ ghub
+ transient
+ [[https://magit.vc/manual/forge/Token-Creation.html#Token-Creation][Github API token]]

** Installation

*** MELPA

~igist~ is available on [[https://melpa.org/#/][MELPA]].

To get started, enable installing packages from MELPA:

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)

#+end_src

To fetch the list of packages you can do:
#+begin_example
<M-x> package-refresh-contents
#+end_example

And after that ~igist~ can be installed with:

#+begin_example
<M-x> package-install igist
#+end_example

*** Manually

Download the repository and it to your load path in your init file:

#+begin_src emacs-lisp :eval no
(add-to-list 'load-path "/path/to/igist")
(require 'igist)
#+end_src

*** With ~use-package~

#+begin_src emacs-lisp :eval no
(use-package igist
  :bind (("M-o" . igist-dispatch)))
#+end_src

Or if you use ~straight.el~:
#+begin_src emacs-lisp
(use-package igist
  :bind (("M-o" . igist-dispatch))
  :straight (igist
             :repo "KarimAziev/igist"
             :type git
             :host github))
#+end_src

#+begin_export html

<details>
  <summary>Example configuration with keymaps</summary>

```elisp
(use-package igist
  :bind (("M-o" . igist-dispatch)
         (:map igist-list-mode-map
               ("C-j" . igist-list-view-current)
               ("RET" . igist-list-edit-gist-at-point)
               ("+" . igist-list-add-file)
               ("-" . igist-delete-current-filename)
               ("D" . igist-delete-current-gist)
               ("S" . igist-star-gist)
               ("U" . igist-unstar-gist)
               ("a" . igist-add-comment)
               ("c" . igist-load-comments)
               ("d" . igist-list-edit-description)
               ("f" . igist-fork-gist)
               ("g" . igist-list-refresh)
               ("r" . igist-browse-gist)
               ("s" . igist-tabulated-list-sort)
               ("v" . igist-list-view-current)
               ("w" . igist-copy-gist-url)
               ("K" . igist-list-cancel-load)
               ("{" . igist-tabulated-list-narrow-current-column)
               ("}" . igist-tabulated-list-widen-current-column)
               ("<tab>" . igist-toggle-row-children-at-point)
               ("<backtab>" . igist-toggle-all-children)
               ("C" . igist-table-menu))
         (:map igist-edit-mode-map
               ([remap save-buffer] . igist-save-current-gist)
               ("M-o" . igist-dispatch)
               ("C-c C-c" . igist-save-current-gist-and-exit)
               ("C-c C-k" . kill-current-buffer)
               ("C-c '" . igist-save-current-gist-and-exit))
         (:map igist-comments-list-mode-map
               ("+" . igist-add-comment)
               ("-" . igist-delete-comment-at-point)
               ("D" . igist-delete-comment-at-point)
               ("e" . igist-add-or-edit-comment)
               ("g" . igist-load-comments)
               ("q" . kill-current-buffer))
         (:map igist-comments-edit-mode-map
               ("M-o" . igist-dispatch)
               ("C-c C-c" . igist-post-comment)
               ("C-c C-k" . kill-current-buffer))))
```
</details>
#+end_export


** Auth
You need to ensure that you have [[https://github.com/settings/tokens][a GitHub API token]] with scope ~gist~. Then there are two options to feed it.

*** Secure

To use ~auth-sources~, you need to add a such entry with a Github username and token, e.g.:

#+begin_example
machine api.github.com login MY_GITHUB_USERNAME^igist password MY_GITHUB_TOKEN
#+end_example

Replace MY_GITHUB_USERNAME with your actual GitHub username and MY_GITHUB_TOKEN with the token.

To use other suffixes instead of =^igist= (~M-x customize-variable~ ~RET~ and type ~igist-auth-marker~).

You can read more in [[https://magit.vc/manual/forge/Token-Creation.html#Token-Creation][ghub]] manual, as igist relies on the provided API.

*** Insecure
If the value of the variable ~igist-auth-marker~ is a string, it will be used as a token.

#+begin_export html

<details>
  <summary>Show example</summary>

```elisp
(use-package igist
  :init (setq-default igist-ask-for-description 'never)
  :config
  (unless igist-current-user-name
    (let ((default-directory user-emacs-directory))
      (condition-case nil
          (progn (setq igist-current-user-name
                       (car-safe
                        (process-lines "git"
                                       "config"
                                       "user.name")))
                 (setq igist-auth-marker
                       (or (ignore-errors
                             (car-safe (process-lines "git" "config"
                                                      "github.oauth-token")))
                           igist-auth-marker)))
        (error (message "Igist-current-user-name cannot setted"))))))
```
</details>
#+end_export

** Usage

*** General

The simplest way is to invoke a transient popup with the list of available commands for the current buffer:

- ~M-x igist-dispatch~ - in ~igists~ buffers it is bound to =M-o=.

*** List gists

There are two ways in which gists can be presented - as a table or as minibuffer completions.

*** Table

- ~M-x igist-list-gists~ - to display gists of logged GitHub user.
  
- ~M-x igist-explore-public-gists~ - list public gists sorted by most recently updated to least recently updated.
  [[./igist-explore-demo.png][./igist-explore-demo.png]]

- ~M-x igist-list-other-user-gists~ - to display public gists of non-logged user.

This commands render and load gists with pagination. To stop or pause loading use command ~igist-list-cancel-load~ (default keybinding is ~K~).

| Key         | Command                                  |
|-------------+------------------------------------------|
| =RET=       | edit gist                                |
| =C-j=       | view gist                                |
| =v=         | view gist                                |
| =+=         | add file to the gist                     |
| =-=         | delete file from gist                    |
| =D=         | delete the whole gist                    |
| =K=         | stop loading                             |
| =S=         | start gist                               |
| =U=         | unstar gist                              |
| =a=         | comment gist                             |
| =c=         | show comments                            |
| =d=         | edit gist description                    |
| =f=         | fork gist                                |
| =g=         | refresh gists                            |
| =r=         | browse gist                              |
| =s=         | sort gists                               |
| =w=         | copy gist url                            |
| ={=         | narrow current gist column               |
| =}=         | widen current gist column                |
| =<tab>=     | toggle visibility of gist files at point |
| =<backtab>= | toggle visibility of all files           |
| =C=         | configure and save view settings         |

To customize these keys, see the variable =igist-list-mode-map=.

You can configure and save width of each column interactivelly with transient menu - ~igist-table-menu~.

[[./igist-demo-view.gif][./igist-demo-view.gif]].

To configure which columns to display in user's buffer customize variable ~igist-explore-format~ and for explore buffers - ~igist-explore-format~.


*** Minibuffer Completions

- ~M-x igist-edit-list~ - read Gist to edit from the minibuffer.

Ivy users can also use ~igist-ivy-read-public-gists~ and ~igist-ivy-read-user-gists~.

*** Edit gist

You can view, edit and save gists in buffers with =igist-edit-mode=.
This minor mode is turned on after command ~igist-edit-gist~ and ~igist-edit-list~.

| Key       | Command              |
|-----------+----------------------|
| =M-o=     | transient popup      |
| =C-c C-c= | save and exit        |
| =C-c '=   | save and exit        |
| =C-x C-s= | save without exiting |

To customize these keys see the variable =igist-edit-mode-map=.

*** List comments

This minor mode is turned on after command ~igist-load-comments~.

In comments list mode, such commands are available:

| Key | Command                     |
|-----+-----------------------------|
| =+= | add comment                 |
| =-= | delete the comment at point |
| =D= | delete the comment at point |
| =e= | add or edit                 |
| =g= | refresh comments            |

To customize these keybindings edit the variable =igist-comments-list-mode-map=.

*** Editing comment

This minor mode is turned on after commands ~igist-edit-comment~ and ~igist-add-comment~.
Keymap for posting and editing comments:

| Key       | Command      |
|-----------+--------------|
| =C-c C-c= | post comment |

To customize these keybindings edit the variable =igist-comments-edit-mode-map=.