#+AUTHOR: Karim Aziiev
#+EMAIL: karim.aziiev@gmail.com

* igist

List, create, update and delete GitHub gists in Emacs.


[[./igist-demo.gif]]

** Overview
The Emacs everywhere goal continues. These are the main features of
~igist~ to help you never leave Emacs to manage your gists.

- Edit a gist
- List gists
- Create a gist
- Delete a gist
- Fork a gist
- Edit, view, list and create comments
- UI
  - transient api
  - tabulated/minibuffer display
- Use auth-sources
** Requirements

+ Emacs >= 28.1
+ ghub
+ transient
+ timezone
+ spinner (optional)
+ [[https://magit.vc/manual/forge/Token-Creation.html#Token-Creation][Github API token]]

** Installation

*** Manually

Download the repository and it to your load path in your init file:

#+begin_src elisp :eval no

(add-to-list 'load-path "/path/to/igist)

(require 'igist)

#+end_src

*** With use-package and straight

#+begin_src elisp :eval no

(use-package igist
  :straight (igist
             :repo "KarimAziev/igist"
             :type git
             :host github)
  :commands (igist-list-mode)
  :bind (("M-o" . igist-dispatch)
         (:map igist-edit-buffer-map
               ("C-c C-c" . igist-save-current-gist-and-exit)
               ("C-c C-k" . kill-current-buffer)
               ("C-c '" . igist-save-current-gist))
         (:map igist-list-mode-map
               ("RET" . igist-list-view-current)
               ("+" . igist-list-add-file)
               ("g" . igist-list-gists))))

#+end_src

** Auth
You need to ensure that you have [[https://github.com/settings/tokens][a GitHub API token]] with scope ~gist~.

For example, your GitHub username is =km=, and you have a token "012345abcdef...". Add such an entry in ~auth-sources~ (~M-x describe-variable~ ~RET~ and type ~auth-sources~, usually it is =~/.authinfo= or =~/.authinfo.gpg=). 

#+begin_example
machine api.github.com login km^igist password 012345abcdef
#+end_example

You can read more in [[https://magit.vc/manual/forge/Token-Creation.html#Token-Creation][ghub]] manual as igist relies on the provided API.

** Usage

*** General

The simplest way is to invoke transient popup with the list of available commands for the current buffer:

- ~M-x igist-dispatch~ - in ~igists~ buffers it is bound to =M-o=.

*** List gists
You can view a list of gists either in tabulated list mode (~igist-list-gists~), or in minibuffer (~M-x igist-edit-gists~).

- ~igist-list-gists~

In ~igist~ tabulated list mode, such commands are available:

| Key | Command       |
|-----+---------------|
| C-j | view gist     |
| v   | view gist     |
| RET | edit gist     |
| -   | delete file   |
| +   | add file      |
| D   | delete gist   |
| c   | load comments |
| g   | refresh gists |
| f   | fork gist     |


*** Edit gist

In the editing buffer such commands are available:

| Key     | Command              |
|---------+----------------------|
| M-o     | transient popup      |
| C-c C-c | save and exit        |
| C-c '   | save and exit        |
| C-x C-s | save without exiting |


*** List comments

In comments list mode, such commands are available:

| Key | Command                     |
|-----+-----------------------------|
| +   | add comment                 |
| -   | delete the comment at point |
| D   | delete the comment at point |
| e   | add or edit                 |
| g   | refresh comments            |

*** Editing comment

Keymap for posting and editing comments:

| Key     | Command      |
|---------+--------------|
| C-c C-c | post comment |
